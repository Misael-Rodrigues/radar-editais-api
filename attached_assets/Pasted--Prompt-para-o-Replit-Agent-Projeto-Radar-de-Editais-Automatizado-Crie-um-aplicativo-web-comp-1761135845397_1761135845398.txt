üß† Prompt para o Replit Agent ‚Äì Projeto ‚ÄúRadar de Editais Automatizado‚Äù

Crie um aplicativo web completo chamado Radar de Editais Automatizado, composto por frontend (HTML, CSS, JavaScript) e backend (Python com FastAPI), que funcione da seguinte forma:

üéØ Objetivo geral

Construir um sistema que busque automaticamente editais p√∫blicos publicados nas √∫ltimas 24 horas (D-1) em fontes oficiais, permita filtragem personalizada e envie alertas autom√°ticos por e-mail aos usu√°rios cadastrados.
O modelo √© inspirado no Radar do Edital do Guia da Licita√ß√£o.

üß© Arquitetura solicitada

Frontend:

Desenvolver em HTML, CSS e JavaScript puro (sem frameworks).

Criar interface limpa e moderna com:

Tela de login/cadastro simples.

Painel de filtros com campos:

Palavras-chave (v√°rios termos separados por v√≠rgula).

Estados (lista de UFs).

Tipo de edital (preg√£o, concorr√™ncia, dispensa, etc.).

Faixa de valor estimado (m√≠nimo e m√°ximo).

Bot√£o ‚ÄúBuscar Editais‚Äù.

Tabela com resultados (t√≠tulo, √≥rg√£o, modalidade, UF, data de publica√ß√£o, link direto).

Bot√£o ‚ÄúEnviar alerta por e-mail‚Äù.

Utilizar fetch API para consumir endpoints do backend.

Backend (Python + FastAPI):

Endpoints REST:

GET /api/editais ‚Üí retorna lista filtrada de editais.

POST /api/filtros ‚Üí salva configura√ß√µes do usu√°rio.

POST /api/alerta ‚Üí envia e-mail com editais filtrados.

Criar fun√ß√£o para coletar automaticamente os editais do dia anterior (D-1).

Usar API p√∫blica do PNCP como fonte principal:

https://pncp.gov.br/api/consulta/v1/contratacoes


Par√¢metros recomendados:

data_publicacao_inicio = data de ontem (D-1)

data_publicacao_fim = data de hoje

uf = estado selecionado

termo = palavra-chave

Estruturar o retorno no formato JSON com:

t√≠tulo, √≥rg√£o, UF, modalidade, data de publica√ß√£o, link do edital.

Agendador autom√°tico:

Implementar rotina di√°ria usando APScheduler para executar √†s 08:00 (hor√°rio de Bras√≠lia):

Buscar editais D-1 automaticamente.

Salvar em banco de dados local (SQLite).

Enviar alertas autom√°ticos por e-mail aos usu√°rios com filtros correspondentes.

Banco de dados (SQLite):
Tabelas:

usuarios: id, nome, email, senha.

filtros: id_usuario, palavras, estados, faixa_valor.

editais: id, titulo, orgao, uf, data_publicacao, modalidade, link.

historico_alertas: id_usuario, data_envio, qtd_editais.

Envio de e-mail:

Implementar envio via smtplib (SMTP padr√£o, compat√≠vel com Gmail ou SendGrid).

O e-mail deve conter um resumo HTML dos editais encontrados (t√≠tulo + link).

Extras:

Adicionar fun√ß√£o adicionar_fonte(url, nome) no backend para permitir incluir novas fontes de editais p√∫blicas (por exemplo: Compras.gov.br, Licita√ß√µes-e, BEC-SP).

Permitir atualiza√ß√£o manual de resultados via bot√£o ‚ÄúAtualizar Agora‚Äù.

Incluir logs de execu√ß√£o e erros no terminal.

üé® Design sugerido

Paleta de cores:

Azul royal (#2563EB)

Verde esmeralda (#10B981)

Cinza neutro (#64748B)

Branco puro de fundo

Estilo limpo, minimalista, com sombras sutis e tabelas bem delimitadas.

Responsivo (ajustar bem em desktop e tablet).

‚öôÔ∏è Instru√ß√µes adicionais

Estruture o projeto em pastas:

/frontend (HTML, CSS, JS)
/backend (app.py, crawler.py, email_sender.py, scheduler.py)


Inclua um arquivo requirements.txt com todas as depend√™ncias (FastAPI, APScheduler, requests, aiosmtplib, etc.).

Configure o backend para rodar localmente em localhost:8000.

Permita acesso CORS do frontend.

Ap√≥s gerar o app, inicialize o servidor e mostre a URL local para testes.

üßÆ Resumo do fluxo do sistema

Usu√°rio faz login e define filtros.

Backend coleta automaticamente editais D-1 (PNCP API).

Editais s√£o filtrados e exibidos na tabela do dashboard.

Sistema envia alertas por e-mail diariamente √†s 08:00.

Admin pode adicionar novas fontes p√∫blicas no painel.